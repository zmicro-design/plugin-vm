#!/bin/bash

help() {
  echo "Usage:"
  echo "  zvm create <name> [cpu] [memory] [disk] [image]"
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi

  local name=$1
  local cpu=$2
  local memory=$3
  local disk=$4
  local image=$5

  local os=$image

  if [ -z "$name" ]; then
    log::error "[$(timestamp)] name is required"
    exit 1
  fi

  if [ -z "$cpu" ]; then
    os::inquirer cpu "text" "how many cpu cores you want to share" true 2
  fi

  if [ -z "$memory" ]; then
    os::inquirer memory "text" "how many memory(unit: GB) you want to share" true 4
  fi

  if [ -z "$disk" ]; then
    os::inquirer disk "text" "how many disk(unit: GB) you want to share" true 10
  fi

  if [ -z "$image" ]; then
    local available_oses=(
      "ubuntu:22.04"
      "ubuntu:20.04"
      "ubuntu:18.04"
      "ubuntu:16.04"
      "ubuntu:14.04"
      "podman"
      "minikube"
      "jellyfin"
      "centos:8"
      "centos:7"
      "centos:6"
      "alinux:2"
      "archlinux"
    )
    os::inquirer os "select" available_oses "which os you want to choose" true 10
  fi

  case $os in
  ubuntu:22.04)
    image=ubuntu
    ;;
  ubuntu:20.04)
    image=20.04
    ;;
  ubuntu:18.04)
    image=18.04
    ;;
  ubuntu:16.04)
    # cloud images: https://foxi.buduanwang.vip/virtualization/pve/388.html/
    image="https://cdimage.ubuntu.com/ubuntu-core/16/stable/current/ubuntu-core-16-amd64.img.xz"
    ;;
  ubuntu:14.04)
    # https://cloud-images.ubuntu.com/releases/trusty/release/
    image=https://cloud-images.ubuntu.com/releases/trusty/release/ubuntu-14.04-server-cloudimg-amd64-disk1.img
    # image="https://cloud-images.ubuntu.com/releases/trusty/release/ubuntu-14.04-server-cloudimg-amd64.tar.gz"
    ;;
  podman)
    image=docker
    ;;
  minikube)
    image=minikube
    ;;
  jellyfin)
    image=jellyfin
    ;;
  centos:8)
    # https://developer.aliyun.com/mirror/centos
    image="https://cloud.centos.org/centos/8/x86_64/images/CentOS-8-GenericCloud-8.4.2105-20210603.0.x86_64.qcow2"
    ;;
  centos:7)
    image="https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud-1503.qcow2.xz"
    ;;
  centos:6)
    image="https://cloud.centos.org/centos/6/images/CentOS-6-x86_64-GenericCloud-1907.qcow2.xz"
    ;;
  alinux:2)
    # https://mirrors.aliyun.com/alinux/image/
    image="https://alinux2.oss-cn-hangzhou.aliyuncs.com/aliyun_2_1903_x64_20G_nocloud_alibase_20220525.qcow2"
    # min size 20G
    if [ "$disk" = "10" ]; then
      log::info "[$(timestamp)] disk size current: $disk, but reset min disk size 20G ..."
      disk=20
    fi
    ;;
  archlinux)
    # https://developer.aliyun.com/mirror/archlinux
    # https://mirrors.aliyun.com/archlinux/images/latest/?spm=a2c6h.25603864.0.0.fa1342985ceyuk
    image="https://mirrors.aliyun.com/archlinux/images/latest/Arch-Linux-x86_64-cloudimg.qcow2"
    ;;
  esac

  # issue:
  #   https://github.com/canonical/multipass/issues/1593
  #   https://github.com/canonical/multipass/issues/1260
  if [ "$(os::is_macos)" = "true" ]; then
    echo "$image" | grep "^https://" >>/dev/null 2>&1
    if [ "$?" = "0" ]; then
      log::error "[$(timestamp)] no support os($os) on Mac OS currently."
      exit 1
    fi
  fi

  # # url
  # local image_filepath=$PLUGIN_VM_IMAGE_CACHE_PATH/$(basename $image)
  # if [ "${image#http}" != "$image" ]; then
  #   if [ ! -f "$image_filepath" ]; then
  #     log::info "[$(timestamp)] downloading image: $image ..."
  #     os::wget -c $image -O $image_filepath
  #   fi

  #   log::info "[$(timestamp)] importing image: $image from $image_filepath ..."
  #   image=file://$image_filepath
  # fi

  log::info "[$(timestamp)] starting vm: $name with os($os, image: $image) ..."
  log::debug "[$(timestamp)] cmd (multipass launch --cpus $cpu --memory ${memory}G --disk ${disk}G --name $name $image)"
  multipass launch --cpus $cpu --memory ${memory}G --disk ${disk}G --name $name $image
  if [ "$?" = "0" ]; then
    log::success "[$(timestamp)] succeed to start vm: $name ."
  else
    log::success "[$(timestamp)] failed to start vm: $name ."
  fi
}

run() {
  core "$@"
}

run "$@"
